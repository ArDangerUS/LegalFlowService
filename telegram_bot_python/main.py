#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ –Ω–∞ Python
–ü–æ–ª–Ω—ã–π –ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å TypeScript –≤–µ—Ä—Å–∏–∏
"""

import asyncio
import logging
import signal
import sys
from typing import Dict, List, Optional
from datetime import datetime, timezone

from telegram import Update, BotCommand
from telegram.ext import Application, CallbackContext
from telegram.error import TelegramError

from config import settings, BOT_COMMANDS, MESSAGES
from utils import (
    FileUtils, DateTimeUtils, MessageUtils, RateLimiter,
    CacheManager, ErrorHandler, rate_limiter, cache_manager,
    setup_logging, async_retry
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞
from telegram_bot_service import TelegramBotService

logger = logging.getLogger(__name__)


class TelegramBotApp:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –±–æ—Ç–∞"""

    def __init__(self):
        self.bot_service: Optional[TelegramBotService] = None
        self.is_running = False
        self.shutdown_event = asyncio.Event()

    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("Starting Telegram Bot Application...")

            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            self.bot_service = TelegramBotService(
                bot_token=settings.telegram_bot_token,
                supabase_url=settings.supabase_url,
                supabase_key=settings.supabase_key
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç
            if not await self.bot_service.initialize():
                logger.error("Failed to initialize bot service")
                return False

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
            await self._setup_bot_commands()

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            await self._setup_additional_handlers()

            logger.info("Telegram Bot Application initialized successfully")
            return True

        except Exception as error:
            logger.error(f"Failed to initialize application: {error}")
            return False

    async def _setup_bot_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        try:
            # –ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ TelegramBotService
            logger.info("Bot commands configured")
        except Exception as error:
            logger.error(f"Error setting up bot commands: {error}")

    async def _setup_additional_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ TelegramBotService
            # –ó–¥–µ—Å—å –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            logger.info("Additional handlers configured")

        except Exception as error:
            logger.error(f"Error setting up additional handlers: {error}")

    async def _handle_help_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            if not await self._check_rate_limit(update):
                return

            await update.message.reply_text(
                MESSAGES['help'],
                parse_mode='HTML'
            )

        except Exception as error:
            logger.error(f"‚ùå Error in help command: {error}")
            await self._send_error_message(update)

    async def _handle_status_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            if not await self._check_rate_limit(update):
                return

            status = self.bot_service.get_connection_status()

            if status['is_connected'] and status['is_polling']:
                status_text = MESSAGES['status_active']

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
                if status['bot_info']:
                    bot_info = status['bot_info']
                    status_text += f"\n\nü§ñ Bot: @{bot_info['username']}"
                    status_text += f"\nüìä Reconnect attempts: {status['reconnect_attempts']}"

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                messages_count = len(await self.bot_service.get_messages(limit=1000))
                conversations_count = len(await self.bot_service.get_conversations())

                status_text += f"\n\nüìà Statistics:"
                status_text += f"\n‚Ä¢ Messages: {messages_count}"
                status_text += f"\n‚Ä¢ Conversations: {conversations_count}"
                status_text += f"\n‚Ä¢ Uptime: {DateTimeUtils.time_ago(datetime.now(timezone.utc))}"

            else:
                status_text = MESSAGES['status_error']

            await update.message.reply_text(status_text)

        except Exception as error:
            logger.error(f"‚ùå Error in status command: {error}")
            await self._send_error_message(update)

    async def _handle_history_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
        try:
            if not await self._check_rate_limit(update):
                return

            chat_id = str(update.message.chat.id)
            messages = await self.bot_service.get_messages(chat_id=chat_id, limit=10)

            if not messages:
                await update.message.reply_text("History is empty")
                return

            history_text = "Last 10 messages:\n\n"

            for msg in reversed(messages[-10:]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
                timestamp = DateTimeUtils.format_datetime(msg.timestamp, "%d.%m %H:%M")
                sender = msg.sender_name
                content = MessageUtils.truncate_text(msg.content, 50)

                direction_emoji = "OUT" if msg.direction.value == "outgoing" else "IN"
                history_text += f"{direction_emoji} {timestamp} - {sender}: {content}\n"

            await update.message.reply_text(
                history_text,
                parse_mode='HTML'
            )

        except Exception as error:
            logger.error(f"‚ùå Error in history command: {error}")
            await self._send_error_message(update)

    async def _handle_export_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export"""
        try:
            if not await self._check_rate_limit(update):
                return

            await update.message.reply_text("Preparing data export...")

            chat_id = str(update.message.chat.id)
            messages = await self.bot_service.get_messages(chat_id=chat_id, limit=1000)

            if not messages:
                await update.message.reply_text("No data to export")
                return

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            messages_data = []
            for msg in messages:
                messages_data.append({
                    'timestamp': msg.timestamp.isoformat(),
                    'sender': msg.sender_name,
                    'content': msg.content,
                    'type': msg.message_type.value,
                    'direction': msg.direction.value
                })

            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
            from utils import DataExporter
            json_data = DataExporter.export_messages_to_json(messages_data)

            if json_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                import tempfile
                with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as f:
                    f.write(json_data)
                    temp_file = f.name

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                with open(temp_file, 'rb') as f:
                    await update.message.reply_document(
                        document=f,
                        filename=f"chat_export_{chat_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                        caption=MESSAGES['export_ready']
                    )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                import os
                os.unlink(temp_file)
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")

        except Exception as error:
            logger.error(f"‚ùå Error in export command: {error}")
            await self._send_error_message(update)

    async def _handle_clear_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear"""
        try:
            if not await self._check_rate_limit(update):
                return

            # –≠—Ç–æ –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, —Ç—Ä–µ–±—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await update.message.reply_text(
                "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π?\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–î–ê' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            user_id = str(update.message.from_user.id)
            cache_manager.set(f"clear_confirmation_{user_id}", True)

        except Exception as error:
            logger.error(f"‚ùå Error in clear command: {error}")
            await self._send_error_message(update)

    async def _handle_settings_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        try:
            if not await self._check_rate_limit(update):
                return

            settings_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n"
            settings_text += f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {FileUtils.format_file_size(settings.max_file_size)}\n"
            settings_text += f"üìÅ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤: {settings.allowed_file_types}\n"
            settings_text += f"‚è±Ô∏è –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {settings.rate_limit_messages} –≤ –º–∏–Ω—É—Ç—É\n"
            settings_text += f"üóÑÔ∏è –†–∞–∑–º–µ—Ä –∫–µ—à–∞: {settings.max_message_cache_size} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            settings_text += f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–ª–∏–Ω–≥–∞: {settings.polling_interval} —Å–µ–∫\n"

            await update.message.reply_text(settings_text)

        except Exception as error:
            logger.error(f"‚ùå Error in settings command: {error}")
            await self._send_error_message(update)

    async def _handle_contact_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /contact"""
        try:
            if not await self._check_rate_limit(update):
                return

            await update.message.reply_text(MESSAGES['contact_support'])

        except Exception as error:
            logger.error(f"‚ùå Error in contact command: {error}")
            await self._send_error_message(update)

    async def _check_rate_limit(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
        user_id = str(update.message.from_user.id)

        if not rate_limiter.is_allowed(user_id):
            reset_time = rate_limiter.get_reset_time(user_id)
            if reset_time:
                wait_time = int(reset_time - datetime.now().timestamp())
                await update.message.reply_text(
                    f"{MESSAGES['rate_limit']}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫."
                )
            else:
                await update.message.reply_text(MESSAGES['rate_limit'])
            return False

        return True

    async def _send_error_message(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            await update.message.reply_text(MESSAGES['error_occurred'])
        except Exception:
            logger.error("‚ùå Failed to send error message")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è Application is already running")
            return

        try:
            logger.info("Starting Telegram Bot Application...")

            if not await self.initialize():
                logger.error("Failed to initialize application")
                return False

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
            await self.bot_service.start_polling()

            self.is_running = True
            logger.info("Telegram Bot Application started successfully")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å admin chat)
            try:
                if hasattr(settings, 'admin_chat_id') and settings.admin_chat_id:
                    await self.bot_service.send_message(
                        settings.admin_chat_id,
                        f"Bot started successfully!\n\nTime: {DateTimeUtils.format_datetime(DateTimeUtils.now_utc())}"
                    )
            except Exception as e:
                logger.debug(f"Could not send startup notification: {e}")

            # –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self.shutdown_event.wait()

        except Exception as error:
            logger.error(f"Error starting application: {error}")
            self.is_running = False
            raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.is_running:
            logger.warning("‚ö†Ô∏è Application is not running")
            return

        try:
            logger.info("Stopping Telegram Bot Application...")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            try:
                if hasattr(settings, 'admin_chat_id') and settings.admin_chat_id:
                    await self.bot_service.send_message(
                        settings.admin_chat_id,
                        f"Bot stopped\n\nTime: {DateTimeUtils.format_datetime(DateTimeUtils.now_utc())}"
                    )
            except Exception as e:
                logger.debug(f"Could not send shutdown notification: {e}")

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
            if self.bot_service:
                await self.bot_service.stop_polling()

            # –û—á–∏—â–∞–µ–º –∫–µ—à
            cache_manager.clear()

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            FileUtils.cleanup_old_files(
                "/tmp/telegram_bot_files",
                max_age_hours=1
            )

            self.is_running = False
            self.shutdown_event.set()

            logger.info("Telegram Bot Application stopped successfully")

        except Exception as error:
            logger.error(f"Error stopping application: {error}")

    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"üì° Received signal {signum}, initiating shutdown...")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ event loop
        loop = asyncio.get_event_loop()
        loop.create_task(self.stop())


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()

    logger.info("=" * 50)
    logger.info("TELEGRAM BOT APPLICATION")
    logger.info("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    required_settings = [
        'telegram_bot_token',
        'supabase_url',
        'supabase_key'
    ]

    missing_settings = []
    for setting in required_settings:
        if not getattr(settings, setting, None):
            missing_settings.append(setting)

    if missing_settings:
        logger.error(f"Missing required settings: {', '.join(missing_settings)}")
        logger.error("Please check your .env file or environment variables")
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = TelegramBotApp()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    def signal_handler(signum, frame):
        logger.info(f"üì° Received signal {signum}")
        asyncio.create_task(app.stop())

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await app.start()

    except KeyboardInterrupt:
        logger.info("Received keyboard interrupt")
        await app.stop()

    except Exception as error:
        logger.error(f"Unhandled error: {error}", exc_info=True)
        await app.stop()
        sys.exit(1)

    finally:
        logger.info("Application finished")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nGoodbye!")
    except Exception as e:
        print(f"Fatal error: {e}")
        sys.exit(1)