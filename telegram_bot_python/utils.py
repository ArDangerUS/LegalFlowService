import os
import asyncio
import hashlib
import mimetypes
from datetime import datetime, timezone
from typing import Optional, Dict, List, Any, Tuple
from pathlib import Path
import logging
import json
import csv
from io import StringIO, BytesIO
import tempfile
import shutil

from config import settings, REGIONS, MESSAGE_TYPES

logger = logging.getLogger(__name__)


class FileUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏"""

    @staticmethod
    def get_file_extension(filename: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        return Path(filename).suffix.lower().lstrip('.')

    @staticmethod
    def get_mime_type(filename: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å MIME —Ç–∏–ø —Ñ–∞–π–ª–∞"""
        mime_type, _ = mimetypes.guess_type(filename)
        return mime_type or 'application/octet-stream'

    @staticmethod
    def is_file_allowed(filename: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —Ç–∏–ø —Ñ–∞–π–ª–∞"""
        extension = FileUtils.get_file_extension(filename)
        allowed_types = settings.allowed_file_types.split(',')
        return extension in allowed_types

    @staticmethod
    def format_file_size(size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
        if size_bytes == 0:
            return "0 B"

        size_names = ["B", "KB", "MB", "GB", "TB"]
        i = 0
        size = float(size_bytes)

        while size >= 1024.0 and i < len(size_names) - 1:
            size /= 1024.0
            i += 1

        return f"{size:.1f} {size_names[i]}"

    @staticmethod
    def generate_file_hash(file_path: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–µ—à —Ñ–∞–π–ª–∞"""
        hash_sha256 = hashlib.sha256()

        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_sha256.update(chunk)

        return hash_sha256.hexdigest()

    @staticmethod
    async def save_telegram_file(file_path: str, telegram_file) -> Optional[str]:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –∏–∑ Telegram"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            temp_dir = Path(tempfile.gettempdir()) / "telegram_bot_files"
            temp_dir.mkdir(exist_ok=True)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            unique_filename = f"{timestamp}_{Path(file_path).name}"
            save_path = temp_dir / unique_filename

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            await telegram_file.download_to_drive(str(save_path))

            logger.info(f"üìÅ File saved: {save_path}")
            return str(save_path)

        except Exception as error:
            logger.error(f"‚ùå Error saving file: {error}")
            return None

    @staticmethod
    def cleanup_old_files(directory: str, max_age_hours: int = 24):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            dir_path = Path(directory)
            if not dir_path.exists():
                return

            cutoff_time = datetime.now().timestamp() - (max_age_hours * 3600)

            for file_path in dir_path.iterdir():
                if file_path.is_file() and file_path.stat().st_mtime < cutoff_time:
                    file_path.unlink()
                    logger.debug(f"üóëÔ∏è Deleted old file: {file_path}")

        except Exception as error:
            logger.error(f"‚ùå Error cleaning up files: {error}")


class DateTimeUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º"""

    @staticmethod
    def now_utc() -> datetime:
        """–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC"""
        return datetime.now(timezone.utc)

    @staticmethod
    def format_datetime(dt: datetime, format_str: str = "%Y-%m-%d %H:%M:%S") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        return dt.strftime(format_str)

    @staticmethod
    def parse_datetime(dt_str: str) -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            return datetime.fromisoformat(dt_str.replace('Z', '+00:00'))
        except ValueError:
            try:
                return datetime.strptime(dt_str, "%Y-%m-%d %H:%M:%S")
            except ValueError:
                return None

    @staticmethod
    def time_ago(dt: datetime) -> str:
        """–í—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        now = DateTimeUtils.now_utc()
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=timezone.utc)

        diff = now - dt

        if diff.days > 0:
            return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 3600:
            hours = diff.seconds // 3600
            return f"{hours} —á. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 60:
            minutes = diff.seconds // 60
            return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"


class MessageUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""

    @staticmethod
    def truncate_text(text: str, max_length: int = 100) -> str:
        """–û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
        if len(text) <= max_length:
            return text
        return text[:max_length - 3] + "..."

    @staticmethod
    def escape_markdown(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã Markdown"""
        escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        for char in escape_chars:
            text = text.replace(char, f'\\{char}')
        return text

    @staticmethod
    def extract_mentions(text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        import re
        return re.findall(r'@(\w+)', text)

    @staticmethod
    def extract_hashtags(text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á—å —Ö–µ—à—Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        import re
        return re.findall(r'#(\w+)', text)

    @staticmethod
    def clean_text(text: str) -> str:
        """–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        import re
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'\s+', ' ', text.strip())
        return text


class RateLimiter:
    """–û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞"""

    def __init__(self, max_requests: int, window_seconds: int):
        self.max_requests = max_requests
        self.window_seconds = window_seconds
        self.requests: Dict[str, List[float]] = {}

    def is_allowed(self, user_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        now = datetime.now().timestamp()

        if user_id not in self.requests:
            self.requests[user_id] = []

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.requests[user_id] = [
            req_time for req_time in self.requests[user_id]
            if now - req_time < self.window_seconds
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.requests[user_id]) >= self.max_requests:
            return False

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        self.requests[user_id].append(now)
        return True

    def get_reset_time(self, user_id: str) -> Optional[float]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.requests or not self.requests[user_id]:
            return None

        oldest_request = min(self.requests[user_id])
        return oldest_request + self.window_seconds


class DataExporter:
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""

    @staticmethod
    def export_messages_to_json(messages: List[Dict]) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ JSON"""
        try:
            return json.dumps(messages, ensure_ascii=False, indent=2, default=str)
        except Exception as error:
            logger.error(f"‚ùå Error exporting to JSON: {error}")
            return ""

    @staticmethod
    def export_messages_to_csv(messages: List[Dict]) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ CSV"""
        try:
            output = StringIO()

            if not messages:
                return ""

            fieldnames = messages[0].keys()
            writer = csv.DictWriter(output, fieldnames=fieldnames)

            writer.writeheader()
            for message in messages:
                writer.writerow(message)

            return output.getvalue()

        except Exception as error:
            logger.error(f"‚ùå Error exporting to CSV: {error}")
            return ""

    @staticmethod
    def export_messages_to_txt(messages: List[Dict]) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        try:
            output = []

            for message in messages:
                timestamp = message.get('timestamp', '')
                sender = message.get('sender_name', 'Unknown')
                content = message.get('content', '')

                output.append(f"[{timestamp}] {sender}: {content}")
                output.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

            return "\n".join(output)

        except Exception as error:
            logger.error(f"‚ùå Error exporting to TXT: {error}")
            return ""


class ValidationUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""

    @staticmethod
    def is_valid_email(email: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email"""
        import re
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return re.match(pattern, email) is not None

    @staticmethod
    def is_valid_phone(phone: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        import re
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        pattern = r'^\+?[\d\s\-\(\)]{7,15}$'
        return re.match(pattern, phone) is not None

    @staticmethod
    def is_valid_url(url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL"""
        import re
        pattern = r'^https?://[^\s/$.?#].[^\s]*$'
        return re.match(pattern, url) is not None

    @staticmethod
    def sanitize_filename(filename: str) -> str:
        """–û—á–∏—Å—Ç–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        import re
        # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(filename) > 255:
            name, ext = os.path.splitext(filename)
            filename = name[:255 - len(ext)] + ext
        return filename


class CacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–µ—à–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, max_size: int = 1000, ttl_seconds: int = 3600):
        self.max_size = max_size
        self.ttl_seconds = ttl_seconds
        self.cache: Dict[str, Tuple[Any, float]] = {}

    def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞"""
        if key not in self.cache:
            return None

        value, timestamp = self.cache[key]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
        if datetime.now().timestamp() - timestamp > self.ttl_seconds:
            del self.cache[key]
            return None

        return value

    def set(self, key: str, value: Any) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–µ—à"""
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –∫–µ—à –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω
        if len(self.cache) >= self.max_size:
            self._cleanup_old_entries()

        self.cache[key] = (value, datetime.now().timestamp())

    def delete(self, key: str) -> None:
        """–£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞"""
        if key in self.cache:
            del self.cache[key]

    def clear(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à"""
        self.cache.clear()

    def _cleanup_old_entries(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏"""
        now = datetime.now().timestamp()
        keys_to_delete = []

        for key, (_, timestamp) in self.cache.items():
            if now - timestamp > self.ttl_seconds:
                keys_to_delete.append(key)

        for key in keys_to_delete:
            del self.cache[key]

        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ
        if len(self.cache) >= self.max_size:
            sorted_items = sorted(self.cache.items(), key=lambda x: x[1][1])
            keys_to_delete = [item[0] for item in sorted_items[:len(self.cache) - self.max_size + 1]]

            for key in keys_to_delete:
                del self.cache[key]


class ErrorHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""

    @staticmethod
    def handle_exception(func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""

        async def wrapper(*args, **kwargs):
            try:
                return await func(*args, **kwargs)
            except Exception as error:
                logger.error(f"‚ùå Error in {func.__name__}: {error}", exc_info=True)
                return None

        return wrapper

    @staticmethod
    def log_error(error: Exception, context: str = "") -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        logger.error(f"‚ùå Error {context}: {error}", exc_info=True)

    @staticmethod
    def format_error_message(error: Exception) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —É—Ç–∏–ª–∏—Ç
rate_limiter = RateLimiter(
    max_requests=settings.rate_limit_messages,
    window_seconds=settings.rate_limit_window
)

cache_manager = CacheManager(
    max_size=settings.max_message_cache_size,
    ttl_seconds=3600  # 1 —á–∞—Å
)


# –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏
def get_user_display_name(user_data: Dict) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_data.get('first_name') and user_data.get('last_name'):
        return f"{user_data['first_name']} {user_data['last_name']}"
    elif user_data.get('first_name'):
        return user_data['first_name']
    elif user_data.get('username'):
        return f"@{user_data['username']}"
    else:
        return f"User {user_data.get('id', 'Unknown')}"


def format_message_type(message_type: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return MESSAGE_TYPES.get(message_type, message_type.title())


def get_region_name(region_code: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –∫–æ–¥—É"""
    return REGIONS.get(region_code.upper(), region_code)


async def async_retry(func, max_attempts: int = 3, delay: float = 1.0):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–∞ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    for attempt in range(max_attempts):
        try:
            return await func()
        except Exception as error:
            if attempt == max_attempts - 1:
                raise error

            wait_time = delay * (2 ** attempt)
            logger.warning(f"‚ö†Ô∏è Attempt {attempt + 1} failed, retrying in {wait_time}s: {error}")
            await asyncio.sleep(wait_time)


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import logging.config
    from config import LOGGING_CONFIG

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
    LOGGING_CONFIG['handlers']['file']['filename'] = str(log_dir / "telegram_bot.log")

    logging.config.dictConfig(LOGGING_CONFIG)

    logger.info("üìù Logging configured successfully")