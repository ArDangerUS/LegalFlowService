// emailService.js - –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email

import nodemailer from 'nodemailer';

class EmailService {
  constructor() {
    this.transporter = null;
  }

  setupTransporter() {
    console.log('üîß Setting up email transporter...');

    const emailConfig = {
      service: process.env.EMAIL_SERVICE || 'gmail',
      host: process.env.EMAIL_HOST || 'smtp.gmail.com',
      port: parseInt(process.env.EMAIL_PORT) || 587,
      secure: false, // true –¥–ª—è 465, false –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ç–æ–≤
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS // App Password –¥–ª—è Gmail
      }
    };

    console.log('üìß Email config check:');
    console.log('- EMAIL_SERVICE:', process.env.EMAIL_SERVICE || 'not set (using gmail)');
    console.log('- EMAIL_HOST:', process.env.EMAIL_HOST || 'not set (using smtp.gmail.com)');
    console.log('- EMAIL_PORT:', process.env.EMAIL_PORT || 'not set (using 587)');
    console.log('- EMAIL_USER:', process.env.EMAIL_USER ? '‚úÖ set' : '‚ùå not set');
    console.log('- EMAIL_PASS:', process.env.EMAIL_PASS ? '‚úÖ set' : '‚ùå not set');

    if (!emailConfig.auth.user || !emailConfig.auth.pass) {
      console.log('‚ùå Email not configured - using simulation mode');
      console.log('To enable real email:');
      console.log('1. Set EMAIL_USER and EMAIL_PASS in .env');
      console.log('2. For Gmail: use App Password (not regular password)');
      console.log('3. Restart the server after updating .env');
      return;
    }

    console.log('üöÄ Creating email transporter with Gmail...');
    this.transporter = nodemailer.createTransport(emailConfig);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    this.transporter.verify((error, success) => {
      if (error) {
        console.error('‚ùå Email configuration error:', error.message);
        console.log('üí° Common Gmail issues:');
        console.log('- Make sure you use App Password, not regular password');
        console.log('- Enable 2FA in Google Account first');
        console.log('- Check that EMAIL_USER is your full Gmail address');
        this.transporter = null;
      } else {
        console.log('‚úÖ Email service ready - real emails will be sent!');
      }
    });
  }

  generateInvitationHTML(invitationData) {
    const { email, role, officeName, token, expiresAt, inviterName } = invitationData;
    const registrationLink = `${process.env.FRONTEND_URL || 'http://localhost:5173'}/invite/${token}`;
    const expirationDate = new Date(expiresAt).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    const roleNames = {
      admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      office_admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ñ–∏—Å–∞',
      lawyer: '–Æ—Ä–∏—Å—Ç',
      client: '–ö–ª–∏–µ–Ω—Ç'
    };

    return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ LegalFlow</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
            .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
            .button { display: inline-block; background: #667eea; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
            .info-box { background: #e3f2fd; padding: 20px; border-radius: 5px; margin: 20px 0; }
            .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
            .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üèõÔ∏è LegalFlow</h1>
                <p>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –¥–µ–ª–∞–º–∏</p>
            </div>
            
            <div class="content">
                <h2>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</h2>
                
                <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
                
                <p>–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ LegalFlow –≤ –∫–∞—á–µ—Å—Ç–≤–µ <strong>${roleNames[role] || role}</strong>.</p>
                
                <div class="info-box">
                    <h3>üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</h3>
                    <ul>
                        <li><strong>Email:</strong> ${email}</li>
                        <li><strong>–†–æ–ª—å:</strong> ${roleNames[role] || role}</li>
                        ${officeName ? `<li><strong>–û—Ñ–∏—Å:</strong> ${officeName}</li>` : ''}
                        ${inviterName ? `<li><strong>–ü—Ä–∏–≥–ª–∞—Å–∏–ª:</strong> ${inviterName}</li>` : ''}
                        <li><strong>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ:</strong> ${expirationDate}</li>
                    </ul>
                </div>
                
                <p>–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</p>
                
                <div style="text-align: center;">
                    <a href="${registrationLink}" class="button">–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</a>
                </div>
                
                <div class="warning">
                    <strong>‚ö†Ô∏è –í–∞–∂–Ω–æ:</strong>
                    <ul>
                        <li>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π</li>
                        <li>–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π</li>
                        <li>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –ø–∏—Å—å–º–æ</li>
                    </ul>
                </div>
                
                <p>–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä:</p>
                <p style="word-break: break-all; background: #f0f0f0; padding: 10px; border-radius: 3px;">
                    ${registrationLink}
                </p>
            </div>
            
            <div class="footer">
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ LegalFlow</p>
                <p style="font-size: 12px; color: #999;">
                    –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏—Å—å–º–æ, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.
                </p>
            </div>
        </div>
    </body>
    </html>`;
  }

  async sendInvitation(invitationData) {
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
  if (this.transporter === null) {
    this.setupTransporter();
  }

  const { email, role, officeName, token, expiresAt, inviterName } = invitationData;

    // –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    if (!this.transporter) {
      console.log(`üìß EMAIL SIMULATION: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ ${email}`);
      console.log(`üîó Registration link: ${process.env.FRONTEND_URL || 'http://localhost:5173'}/invite/${token}`);
      return { success: true, simulation: true };
    }

    const roleNames = {
      admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      office_admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ñ–∏—Å–∞',
      lawyer: '–Æ—Ä–∏—Å—Ç',
      client: '–ö–ª–∏–µ–Ω—Ç'
    };

    const mailOptions = {
      from: {
        name: 'LegalFlow System',
        address: process.env.EMAIL_USER
      },
      to: email,
      subject: `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ LegalFlow - ${roleNames[role] || role}`,
      html: this.generateInvitationHTML(invitationData),
      text: `
        –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ LegalFlow
        
        –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ LegalFlow –≤ –∫–∞—á–µ—Å—Ç–≤–µ ${roleNames[role] || role}.
        
        –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
        ${process.env.FRONTEND_URL || 'http://localhost:5173'}/invite/${token}
        
        –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: ${new Date(expiresAt).toLocaleString('ru-RU')}
        
        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
        –ö–æ–º–∞–Ω–¥–∞ LegalFlow
      `
    };

    try {
      const info = await this.transporter.sendMail(mailOptions);
      console.log('‚úÖ Email sent successfully:', info.messageId);
      return { success: true, messageId: info.messageId };
    } catch (error) {
      console.error('‚ùå Email sending failed:', error.message);
      return { success: false, error: error.message };
    }
  }

  async sendPasswordReset(email, resetToken) {
    // –î–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    console.log(`üìß Password reset simulation for ${email}`);
  }

  async sendNotification(email, subject, message) {
    // –î–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    console.log(`üìß Notification simulation for ${email}: ${subject}`);
  }
}

export default new EmailService();