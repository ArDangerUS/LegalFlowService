// server.js - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Supabase

import express from 'express';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import cors from 'cors';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ü–ï–†–í–´–ú –î–ï–õ–û–ú
import { config } from 'dotenv';
const result = config();

console.log('üìÅ Loading .env file...');
if (result.error) {
  console.error('‚ùå Error loading .env file:', result.error.message);
  console.log('üí° Make sure .env file exists in the same directory as server.js');
} else {
  console.log('‚úÖ .env file loaded successfully');
  console.log('üìã Found variables:', Object.keys(result.parsed || {}).join(', '));
}

// –í–ê–ñ–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º EmailService –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏ .env
import emailService from './emailService.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
const port = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå CRITICAL ERROR: Supabase configuration missing!');
  console.error('Please set VITE_SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY in .env file');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

console.log('‚úÖ Supabase initialized successfully');
console.log('üîç Environment check:');
console.log('- NODE_ENV:', process.env.NODE_ENV);
console.log('- PORT:', process.env.PORT);
console.log('- FRONTEND_URL:', process.env.FRONTEND_URL);
console.log('- EMAIL_USER:', process.env.EMAIL_USER ? '‚úÖ configured' : '‚ùå not set');
console.log('- EMAIL_PASS:', process.env.EMAIL_PASS ? '‚úÖ configured' : '‚ùå not set');

// CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const corsOptions = {
  origin: ['http://localhost:3000', 'http://localhost:5173', 'http://localhost:4173'],
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true
};

// Middleware
app.use(cors(corsOptions));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
app.use('/api', (req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  console.log('Headers:', req.headers.authorization ? 'Authorization present' : 'No authorization');
  next();
});


const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

// Webhook endpoint –¥–ª—è Telegram (–í–ê–ñ–ù–û: –¥–æ static files)
app.post('/webhook', async (req, res) => {
  try {
    const update = req.body;
    console.log('üì® Telegram webhook update:', JSON.stringify(update, null, 2));

    if (update.message) {
      await handleTelegramMessage(update.message);
    }

    res.status(200).send('OK');
  } catch (error) {
    console.error('‚ùå Webhook error:', error);
    res.status(200).send('OK');
  }
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook (–í–ê–ñ–ù–û: –¥–æ static files)
app.get('/setup-webhook', async (req, res) => {
  if (!TELEGRAM_BOT_TOKEN) {
    return res.status(500).json({ error: 'TELEGRAM_BOT_TOKEN not set' });
  }

  try {
    const webhookUrl = `${req.protocol}://${req.get('host')}/webhook`;

    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url: webhookUrl,
        drop_pending_updates: true
      })
    });

    const data = await response.json();

    if (data.ok) {
      res.json({
        success: true,
        webhook_url: webhookUrl,
        message: 'Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!',
        telegram_response: data
      });
    } else {
      res.status(400).json({
        success: false,
        error: data.description
      });
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleTelegramMessage(message) {
  const chatId = message.chat.id;
  const text = message.text || '';
  const senderName = message.from.first_name + (message.from.username ? ` (@${message.from.username})` : '');

  console.log(`üì® Message from ${senderName}: ${text}`);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º conversation
    let conversationId;
    const { data: existingConv } = await supabase
      .from('conversations')
      .select('id')
      .eq('telegram_chat_identifier', chatId.toString())
      .single();

    if (existingConv) {
      conversationId = existingConv.id;
    } else {
      const { data: newConv } = await supabase
        .from('conversations')
        .insert({
          name: message.chat.first_name || `Chat ${chatId}`,
          telegram_chat_identifier: chatId.toString()
        })
        .select('id')
        .single();

      conversationId = newConv.id;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await supabase
      .from('messages')
      .insert({
        conversation_id: conversationId,
        content: text,
        sender_name: senderName,
        message_type: 'received',
        telegram_message_id: message.message_id
      });

    console.log('üíæ Message saved to database');

    // –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç
    if (text.toLowerCase().includes('–ø—Ä–∏–≤–µ—Ç') || text.startsWith('/start')) {
      await sendTelegramMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    } else {
      await sendTelegramMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –∏ –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    }

  } catch (dbError) {
    console.error('‚ùå Database error:', dbError);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(chatId, text) {
  if (!TELEGRAM_BOT_TOKEN) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN not set');
    return;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: text
      })
    });

    const data = await response.json();

    if (data.ok) {
      console.log('‚úÖ Auto-reply sent');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const { data: conversation } = await supabase
        .from('conversations')
        .select('id')
        .eq('telegram_chat_identifier', chatId.toString())
        .single();

      if (conversation) {
        await supabase
          .from('messages')
          .insert({
            conversation_id: conversation.id,
            content: text,
            sender_name: 'LegalFlow Bot',
            message_type: 'sent',
            telegram_message_id: data.result.message_id
          });
      }
    } else {
      console.error('‚ùå Telegram API error:', data.description);
    }
  } catch (error) {
    console.error('‚ùå Error sending message:', error);
  }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function verifyAuth(req, res, next) {
  try {
    console.log('üîê Verifying authentication...');
    const authHeader = req.headers.authorization;

    if (!authHeader) {
      console.log('‚ùå No authorization header');
      return res.status(401).json({ error: 'Unauthorized - No token provided' });
    }

    const token = authHeader.replace('Bearer ', '');
    console.log('üé´ Token received (first 20 chars):', token.substring(0, 20) + '...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Supabase Auth
    const { data: { user }, error } = await supabase.auth.getUser(token);

    if (error) {
      console.log('‚ùå Token verification failed:', error.message);
      return res.status(401).json({ error: 'Unauthorized - Invalid token' });
    }

    if (!user) {
      console.log('‚ùå No user found for token');
      return res.status(401).json({ error: 'Unauthorized - No user found' });
    }

    console.log('üë§ Auth user found:', { id: user.id, email: user.email });

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', user.id)
      .single();

    if (userError) {
      console.log('‚ùå Database user lookup failed:', userError.message);

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ auth, –Ω–æ –Ω–µ—Ç –≤ users —Ç–∞–±–ª–∏—Ü–µ, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
      if (userError.code === 'PGRST116') {
        console.log('üÜï Creating user record in database...');

        const { data: newUser, error: createError } = await supabase
          .from('users')
          .insert({
            id: user.id,
            name: user.user_metadata?.name || user.email?.split('@')[0] || 'Unknown',
            email: user.email,
            role: user.user_metadata?.role || 'lawyer',
            office_id: user.user_metadata?.office_id || null,
            is_active: true
          })
          .select()
          .single();

        if (createError) {
          console.log('‚ùå Failed to create user record:', createError.message);
          return res.status(500).json({
            error: 'Failed to create user record',
            details: createError.message
          });
        }

        console.log('‚úÖ User record created:', newUser);
        req.user = newUser;
        return next();
      }

      return res.status(401).json({
        error: 'User not found in database',
        details: userError.message
      });
    }

    if (!userData) {
      console.log('‚ùå No user data found');
      return res.status(401).json({ error: 'User data not found' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (!userData.is_active) {
      console.log('‚ùå User is not active');
      return res.status(401).json({ error: 'User account is disabled' });
    }

    console.log('‚úÖ Database user found:', {
      id: userData.id,
      name: userData.name,
      email: userData.email,
      role: userData.role,
      office_id: userData.office_id
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º last_login (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ)
    await supabase
      .from('users')
      .update({ last_login: new Date().toISOString() })
      .eq('id', userData.id);

    req.user = userData;
    next();
  } catch (error) {
    console.error('üí• Auth verification error:', error);
    res.status(401).json({
      error: 'Authentication failed',
      details: error.message
    });
  }
}

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
    port: port,
    supabase: {
      url: supabaseUrl ? 'configured' : 'not configured',
      connected: !!supabase
    }
  });
});

// –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö API —Ä–æ—É—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ /api/health)
app.get('/api/external/httpbin-status', async (req, res) => {
  try {
    const response = await fetch('https://httpbin.org/status/200');
    const status = response.status;
    const statusText = response.statusText;

    res.json({
      status,
      statusText,
      success: response.ok,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      error: error.message,
      success: false
    });
  }
});

// API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ñ–∏—Å–æ–≤
app.get('/api/offices', verifyAuth, async (req, res) => {
  try {
    console.log('üè¢ Loading offices from Supabase...');
    console.log('User role:', req.user.role);

    let query = supabase
      .from('offices')
      .select('id, name, address, city, phone, email, created_at');

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ –æ—Ñ–∏—Å
    if (req.user.role !== 'admin' && req.user.office_id) {
      query = query.eq('id', req.user.office_id);
    }

    const { data: offices, error } = await query.order('name');

    if (error) {
      console.error('Supabase offices error:', error);
      return res.status(500).json({ error: 'Failed to load offices from database' });
    }

    console.log(`‚úÖ Loaded ${offices?.length || 0} offices from Supabase`);
    res.json(offices || []);
  } catch (error) {
    console.error('Get offices error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.post('/api/offices', verifyAuth, async (req, res) => {
  try {
    const { name, address, city, phone, email } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (req.user.role !== 'admin') {
      return res.status(403).json({ error: 'Only admins can create offices' });
    }

    if (!name || !city) {
      return res.status(400).json({ error: 'Name and city are required' });
    }

    console.log('üè¢ Creating office in Supabase:', { name, city });

    const { data: office, error } = await supabase
      .from('offices')
      .insert({
        name: name.trim(),
        address: address?.trim() || null,
        city: city.trim(),
        phone: phone?.trim() || null,
        email: email?.trim() || null
      })
      .select()
      .single();

    if (error) {
      console.error('Supabase create office error:', error);
      return res.status(500).json({ error: 'Failed to create office in database' });
    }

    console.log('‚úÖ Office created in Supabase:', office);
    res.status(201).json(office);
  } catch (error) {
    console.error('Create office error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// DELETE –æ—Ñ–∏—Å - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
app.delete('/api/offices/:id', verifyAuth, async (req, res) => {
  try {
    const { id } = req.params;
    console.log('üóëÔ∏è DELETE /api/offices/:id called with id:', id);
    console.log('üìã User info:', {
      id: req.user?.id,
      role: req.user?.role,
      email: req.user?.email
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –æ—Ñ–∏—Å—ã
    if (req.user?.role !== 'admin') {
      console.log('‚ùå Access denied: user role is', req.user?.role);
      return res.status(403).json({
        error: 'Access denied',
        message: 'Only administrators can delete offices'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –≤–∞–ª–∏–¥–Ω—ã–π
    if (!id || id.length < 10) {
      console.log('‚ùå Invalid office ID:', id);
      return res.status(400).json({
        error: 'Invalid office ID'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ñ–∏—Å
    console.log('üîç Checking if office exists...');
    const { data: existingOffice, error: checkError } = await supabase
      .from('offices')
      .select('id, name')
      .eq('id', id)
      .single();

    if (checkError) {
      console.log('‚ùå Error checking office existence:', checkError);
      if (checkError.code === 'PGRST116') {
        return res.status(404).json({
          error: 'Office not found',
          message: `Office with ID ${id} does not exist`
        });
      }
      return res.status(500).json({
        error: 'Database error',
        details: checkError.message
      });
    }

    if (!existingOffice) {
      console.log('‚ùå Office not found in database:', id);
      return res.status(404).json({
        error: 'Office not found'
      });
    }

    console.log('‚úÖ Found office to delete:', existingOffice.name);

    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    console.log('üîÑ Starting deletion transaction...');

    // –®–∞–≥ 1: –û—Ç–≤—è–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç –æ—Ñ–∏—Å–∞
    console.log('üë• Step 1: Unbinding users from office...');
    const { error: unbindUsersError, count: unbindUsersCount } = await supabase
      .from('users')
      .update({ office_id: null })
      .eq('office_id', id)
      .select('id', { count: 'exact', head: true });

    if (unbindUsersError) {
      console.error('‚ùå Error unbinding users:', unbindUsersError);
      return res.status(500).json({
        error: 'Failed to unbind users from office',
        details: unbindUsersError.message
      });
    }

    console.log(`‚úÖ Unbound ${unbindUsersCount || 0} users from office`);

    // –®–∞–≥ 2: –£–¥–∞–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Ñ–∏—Å–æ–º
    console.log('üè¢ Step 2: Deleting companies associated with office...');
    const { error: deleteCompaniesError, count: deleteCompaniesCount } = await supabase
      .from('companies')
      .delete()
      .eq('office_id', id)
      .select('id', { count: 'exact', head: true });

    if (deleteCompaniesError) {
      console.error('‚ùå Error deleting companies:', deleteCompaniesError);
      return res.status(500).json({
        error: 'Failed to delete companies associated with office',
        details: deleteCompaniesError.message
      });
    }

    console.log(`‚úÖ Deleted ${deleteCompaniesCount || 0} companies from office`);

    // –®–∞–≥ 3: –û—Ç–≤—è–∑—ã–≤–∞–µ–º –¥–µ–ª–∞ –æ—Ç –æ—Ñ–∏—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    console.log('üìã Step 3: Unbinding cases from office...');
    const { error: unbindCasesError, count: unbindCasesCount } = await supabase
      .from('cases')
      .update({ office_id: null })
      .eq('office_id', id)
      .select('id', { count: 'exact', head: true });

    if (unbindCasesError) {
      console.error('‚ö†Ô∏è Warning: Error unbinding cases:', unbindCasesError);
      // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–π –æ—à–∏–±–∫–µ, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    } else {
      console.log(`‚úÖ Unbound ${unbindCasesCount || 0} cases from office`);
    }

    // –®–∞–≥ 4: –û—Ç–≤—è–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ—Ñ–∏—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    console.log('üí¨ Step 4: Unbinding messages from office...');
    const { error: unbindMessagesError, count: unbindMessagesCount } = await supabase
      .from('telegram_messages')
      .update({ office_id: null })
      .eq('office_id', id)
      .select('id', { count: 'exact', head: true });

    if (unbindMessagesError) {
      console.error('‚ö†Ô∏è Warning: Error unbinding messages:', unbindMessagesError);
      // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–π –æ—à–∏–±–∫–µ
    } else {
      console.log(`‚úÖ Unbound ${unbindMessagesCount || 0} messages from office`);
    }

    // –®–∞–≥ 5: –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ñ–∏—Å–∞
    console.log('üìß Step 5: Deleting invitations for office...');
    const { error: deleteInvitationsError, count: deleteInvitationsCount } = await supabase
      .from('invitations')
      .delete()
      .eq('office_id', id)
      .select('id', { count: 'exact', head: true });

    if (deleteInvitationsError) {
      console.error('‚ö†Ô∏è Warning: Error deleting invitations:', deleteInvitationsError);
      // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–π –æ—à–∏–±–∫–µ, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü–∞ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    } else {
      console.log(`‚úÖ Deleted ${deleteInvitationsCount || 0} invitations`);
    }

    // –®–∞–≥ 6: –£–¥–∞–ª—è–µ–º —Å–∞–º –æ—Ñ–∏—Å
    console.log('üè¢ Step 6: Deleting office...');

    // –®–∞–≥ 6: –£–¥–∞–ª—è–µ–º —Å–∞–º –æ—Ñ–∏—Å
    console.log('üè¢ Step 6: Deleting office...');
    const { error: deleteError, count: deleteCount } = await supabase
      .from('offices')
      .delete()
      .eq('id', id)
      .select('id', { count: 'exact', head: true });

    if (deleteError) {
      console.error('‚ùå Error deleting office:', deleteError);
      return res.status(500).json({
        error: 'Failed to delete office',
        details: deleteError.message
      });
    }


    console.log('‚úÖ Office deleted successfully:', existingOffice.name);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.status(200).json({
      success: true,
      message: 'Office and associated data deleted successfully',
      deletedOffice: {
        id: id,
        name: existingOffice.name
      },
      stats: {
        unboundUsers: unbindUsersCount || 0,
        deletedCompanies: deleteCompaniesCount || 0,
        unboundCases: unbindCasesCount || 0,
        unboundMessages: unbindMessagesCount || 0,
        deletedInvitations: deleteInvitationsCount || 0
      }
    });

  } catch (error) {
    console.error('üí• Unexpected error in DELETE /api/offices/:id:', error);
    res.status(500).json({
      error: 'Internal server error',
      message: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// === –¢–ê–ö–ñ–ï –î–û–ë–ê–í–ò–ú GET –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ===
app.get('/api/offices/:id', verifyAuth, async (req, res) => {
  try {
    const { id } = req.params;
    console.log('üîç GET /api/offices/:id called with id:', id);

    const { data: office, error } = await supabase
      .from('offices')
      .select('*')
      .eq('id', id)
      .single();

    if (error) {
      if (error.code === 'PGRST116') {
        return res.status(404).json({ error: 'Office not found' });
      }
      return res.status(500).json({ error: error.message });
    }

    res.json(office);
  } catch (error) {
    console.error('Error getting office:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// PUT (–æ–±–Ω–æ–≤–∏—Ç—å) –æ—Ñ–∏—Å
app.put('/api/offices/:id', verifyAuth, async (req, res) => {
  try {
    const { id } = req.params;
    const { name, address, city, phone, email } = req.body;

    console.log('üìù Updating office:', id);
    console.log('User role:', req.user?.role);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (req.user?.role !== 'admin') {
      return res.status(403).json({
        error: 'Access denied',
        message: 'Only administrators can update offices'
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name?.trim() || !city?.trim()) {
      return res.status(400).json({
        error: 'Validation error',
        message: 'Name and city are required'
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ñ–∏—Å
    const { data: updatedOffice, error } = await supabase
      .from('offices')
      .update({
        name: name.trim(),
        address: address?.trim() || null,
        city: city.trim(),
        phone: phone?.trim() || null,
        email: email?.trim() || null,
        updated_at: new Date().toISOString()
      })
      .eq('id', id)
      .select()
      .single();

    if (error) {
      console.error('Update office error:', error);
      return res.status(500).json({
        error: 'Failed to update office',
        details: error.message
      });
    }

    if (!updatedOffice) {
      return res.status(404).json({
        error: 'Office not found'
      });
    }

    console.log('‚úÖ Office updated successfully');
    res.json(updatedOffice);

  } catch (error) {
    console.error('Update office error:', error);
    res.status(500).json({
      error: 'Internal server error',
      details: error.message
    });
  }
});

// API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
app.post('/api/invitations', verifyAuth, async (req, res) => {
  try {
    console.log('üì® Creating invitation in Supabase:', req.body);
    console.log('üë§ User making request:', { id: req.user.id, role: req.user.role, office_id: req.user.office_id });

    const { email, role, officeId } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (!['admin', 'office_admin'].includes(req.user.role)) {
      console.log('‚ùå Access denied: user role not allowed');
      return res.status(403).json({ error: 'Only admins and office admins can create invitations' });
    }

    if (!email || !role) {
      console.log('‚ùå Validation failed: missing email or role');
      return res.status(400).json({ error: 'Email and role are required' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ office_admin –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π –æ—Ñ–∏—Å
    let targetOfficeId = officeId;
    if (req.user.role === 'office_admin') {
      if (officeId && officeId !== req.user.office_id) {
        console.log('‚ùå Access denied: office_admin trying to invite to different office');
        return res.status(403).json({ error: 'Office admins can only invite to their own office' });
      }
      targetOfficeId = req.user.office_id;
    }

    console.log('üéØ Target office ID:', targetOfficeId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º email
    console.log('üîç Checking for existing user...');
    const { data: existingUser, error: userCheckError } = await supabase
      .from('users')
      .select('id')
      .eq('email', email)
      .single();

    if (userCheckError && userCheckError.code !== 'PGRST116') {
      console.error('‚ùå Error checking existing user:', userCheckError);
      return res.status(500).json({ error: 'Database error while checking existing user' });
    }

    if (existingUser) {
      console.log('‚ùå User already exists');
      return res.status(400).json({ error: 'User with this email already exists' });
    }

    console.log('‚úÖ No existing user found');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç email
    console.log('üîç Checking for existing invitation...');
    const { data: existingInvitation, error: inviteCheckError } = await supabase
      .from('invitations')
      .select('id')
      .eq('email', email)
      .gte('expires_at', new Date().toISOString())
      .single();

    if (inviteCheckError && inviteCheckError.code !== 'PGRST116') {
      console.error('‚ùå Error checking existing invitation:', inviteCheckError);
      return res.status(500).json({ error: 'Database error while checking existing invitation' });
    }

    if (existingInvitation) {
      console.log('‚ùå Active invitation already exists');
      return res.status(400).json({ error: 'Active invitation for this email already exists' });
    }

    console.log('‚úÖ No existing invitation found');

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    const token = Math.random().toString(36).substring(2) + Date.now().toString(36);
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 7); // 7 –¥–Ω–µ–π

    console.log('üé≤ Generated token:', token);
    console.log('‚è∞ Expires at:', expiresAt.toISOString());

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ Supabase
    console.log('üíæ Inserting invitation into database...');
    const invitationData = {
      email,
      role,
      office_id: targetOfficeId || null,
      invited_by: req.user.id,
      created_by: req.user.id, // –î–æ–±–∞–≤–ª—è–µ–º created_by —Ç–æ–∂–µ
      token,
      expires_at: expiresAt.toISOString()
    };

    console.log('üìã Invitation data to insert:', invitationData);

    const { data: invitation, error } = await supabase
      .from('invitations')
      .insert(invitationData)
      .select(`
        id,
        email,
        role,
        office_id,
        token,
        expires_at,
        created_at,
        offices(name, city)
      `)
      .single();

    if (error) {
      console.error('‚ùå Supabase create invitation error:', error);
      return res.status(500).json({
        error: 'Failed to create invitation in database',
        details: error.message
      });
    }

    console.log('‚úÖ Invitation created in Supabase:', invitation);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π email
    const emailResult = await emailService.sendInvitation({
      email: invitation.email,
      role: invitation.role,
      officeName: invitation.offices ? `${invitation.offices.name} (${invitation.offices.city})` : null,
      token: invitation.token,
      expiresAt: invitation.expires_at,
      inviterName: req.user.name
    });

    const response = {
      id: invitation.id,
      email: invitation.email,
      role: invitation.role,
      officeId: invitation.office_id,
      officeName: invitation.offices ? `${invitation.offices.name} (${invitation.offices.city})` : null,
      token: invitation.token,
      expiresAt: invitation.expires_at,
      createdAt: invitation.created_at,
      message: emailResult.simulation
        ? `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! (Email —Å–∏–º—É–ª—è—Ü–∏—è - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ EMAIL_USER –∏ EMAIL_PASS –≤ .env –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)`
        : emailResult.success
          ? `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}!`
          : `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${emailResult.error}`,
      emailSent: emailResult.success && !emailResult.simulation
    };

    console.log('üì§ Sending response:', response);
    res.status(201).json(response);

  } catch (error) {
    console.error('üí• Create invitation error:', error);
    res.status(500).json({
      error: 'Internal server error',
      details: error.message
    });
  }
});

app.get('/api/invitations', verifyAuth, async (req, res) => {
  try {
    console.log('üìã Loading invitations from Supabase...');

    let query = supabase
      .from('invitations')
      .select(`
        id,
        email,
        role,
        office_id,
        expires_at,
        created_at,
        offices(name, city),
        users!invited_by(name, email)
      `)
      .gte('expires_at', new Date().toISOString()) // –¢–æ–ª—å–∫–æ –Ω–µ –∏—Å—Ç–µ–∫—à–∏–µ
      .order('created_at', { ascending: false });

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –µ–≥–æ –æ—Ñ–∏—Å–∞
    if (req.user.role !== 'admin' && req.user.office_id) {
      query = query.eq('office_id', req.user.office_id);
    }

    const { data: invitations, error } = await query;

    if (error) {
      console.error('Supabase invitations error:', error);
      return res.status(500).json({ error: 'Failed to load invitations from database' });
    }

    const formattedInvitations = (invitations || []).map(inv => ({
      id: inv.id,
      email: inv.email,
      role: inv.role,
      officeId: inv.office_id,
      officeName: inv.offices ? `${inv.offices.name} (${inv.offices.city})` : 'No office',
      sentBy: inv.users?.name || 'Unknown',
      expiresAt: inv.expires_at,
      createdAt: inv.created_at,
      isExpired: new Date(inv.expires_at) < new Date()
    }));

    console.log(`‚úÖ Loaded ${formattedInvitations.length} invitations from Supabase`);
    res.json(formattedInvitations);
  } catch (error) {
    console.error('Get invitations error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.post('/api/invitations/:id/resend', verifyAuth, async (req, res) => {
  try {
    const { id } = req.params;

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const { data: invitation, error: fetchError } = await supabase
      .from('invitations')
      .select('*')
      .eq('id', id)
      .single();

    if (fetchError || !invitation) {
      return res.status(404).json({ error: 'Invitation not found' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (req.user.role !== 'admin' && invitation.office_id !== req.user.office_id) {
      return res.status(403).json({ error: 'Access denied' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    const newExpiresAt = new Date();
    newExpiresAt.setDate(newExpiresAt.getDate() + 7);

    const { error: updateError } = await supabase
      .from('invitations')
      .update({ expires_at: newExpiresAt.toISOString() })
      .eq('id', id);

    if (updateError) {
      console.error('Supabase resend invitation error:', updateError);
      return res.status(500).json({ error: 'Failed to resend invitation' });
    }

    console.log(`üìß EMAIL SIMULATION: –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ ${invitation.email}`);
    console.log(`üîó Registration link: ${req.protocol}://${req.get('host')}/invite/${invitation.token}`);

    res.json({ message: 'Invitation resent successfully' });
  } catch (error) {
    console.error('Resend invitation error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.delete('/api/invitations/:id', verifyAuth, async (req, res) => {
  try {
    const { id } = req.params;

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
    const { data: invitation, error: fetchError } = await supabase
      .from('invitations')
      .select('office_id')
      .eq('id', id)
      .single();

    if (fetchError || !invitation) {
      return res.status(404).json({ error: 'Invitation not found' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (req.user.role !== 'admin' && invitation.office_id !== req.user.office_id) {
      return res.status(403).json({ error: 'Access denied' });
    }

    const { error } = await supabase
      .from('invitations')
      .delete()
      .eq('id', id);

    if (error) {
      console.error('Supabase delete invitation error:', error);
      return res.status(500).json({ error: 'Failed to delete invitation' });
    }

    console.log('‚úÖ Invitation deleted from Supabase:', id);
    res.json({ message: 'Invitation deleted successfully' });
  } catch (error) {
    console.error('Delete invitation error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.get('/api/invitations/:token', async (req, res) => {
  try {
    const { token } = req.params;

    const { data: invitation, error } = await supabase
      .from('invitations')
      .select(`
        id,
        email,
        role,
        office_id,
        expires_at,
        offices(name, city)
      `)
      .eq('token', token)
      .single();

    if (error || !invitation) {
      return res.status(404).json({ error: 'Invitation not found' });
    }

    if (new Date(invitation.expires_at) < new Date()) {
      return res.status(410).json({ error: 'Invitation has expired' });
    }

    res.json({
      id: invitation.id,
      email: invitation.email,
      role: invitation.role,
      officeId: invitation.office_id,
      officeName: invitation.offices ? `${invitation.offices.name} (${invitation.offices.city})` : null,
      expiresAt: invitation.expires_at,
      isExpired: false
    });
  } catch (error) {
    console.error('Get invitation by token error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.post('/api/invitations/:token/accept', async (req, res) => {
  try {
    const { token } = req.params;
    const { name, password } = req.body;

    console.log('üé´ Processing invitation acceptance:', { token: token.substring(0, 8) + '...', name });

    if (!name || !password) {
      return res.status(400).json({ error: 'Name and password are required' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    const { data: invitation, error: inviteError } = await supabase
      .from('invitations')
      .select('*')
      .eq('token', token)
      .single();

    if (inviteError || !invitation) {
      console.log('‚ùå Invalid invitation:', inviteError?.message);
      return res.status(404).json({ error: 'Invitation not found' });
    }

    if (new Date(invitation.expires_at) < new Date()) {
      console.log('‚ùå Invitation expired');
      return res.status(410).json({ error: 'Invitation has expired' });
    }

    console.log('‚úÖ Valid invitation found:', {
      email: invitation.email,
      role: invitation.role,
      office_id: invitation.office_id
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const { data: existingUser } = await supabase
      .from('users')
      .select('id')
      .eq('email', invitation.email)
      .single();

    if (existingUser) {
      console.log('‚ùå User already exists:', invitation.email);
      return res.status(400).json({ error: 'User with this email already exists' });
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase Auth —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
      email: invitation.email,
      password: password,
      email_confirm: true,
      user_metadata: {
        name: name.trim(),
        role: invitation.role,
        office_id: invitation.office_id
      }
    });

    if (authError) {
      console.error('‚ùå Auth error details:', authError);
      return res.status(500).json({
        error: 'Failed to create user account',
        details: authError.message
      });
    }

    console.log('‚úÖ Auth user created:', authUser.user.id);

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª–∞—Å—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ public.users —á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä
    let { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', authUser.user.id)
      .single();

    // –ï—Å–ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –≤—Ä—É—á–Ω—É—é
    if (userError && userError.code === 'PGRST116') {
      console.log('üîß Creating user record manually...');

      const { data: manualUser, error: manualError } = await supabase
        .from('users')
        .insert({
          id: authUser.user.id,
          name: name.trim(),
          email: invitation.email,
          role: invitation.role,
          office_id: invitation.office_id,
          is_active: true
        })
        .select()
        .single();

      if (manualError) {
        console.error('‚ùå Manual user creation error:', manualError);
        // –£–¥–∞–ª—è–µ–º auth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ users
        await supabase.auth.admin.deleteUser(authUser.user.id);
        return res.status(500).json({
          error: 'Failed to create user record',
          details: manualError.message
        });
      }

      user = manualUser;
      console.log('‚úÖ User created manually:', user.id);
    } else if (userError) {
      console.error('‚ùå User lookup error:', userError);
      await supabase.auth.admin.deleteUser(authUser.user.id);
      return res.status(500).json({
        error: 'Failed to create user record',
        details: userError.message
      });
    } else {
      console.log('‚úÖ User created by trigger:', user.id);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ "accepted"
    const { error: updateError } = await supabase
      .from('invitations')
      .update({ status: 'accepted' })
      .eq('token', token);

    if (updateError) {
      console.error('‚ùå Failed to update invitation status:', updateError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    }

    console.log('‚úÖ User registered successfully:', {
      id: user.id,
      name: user.name,
      email: user.email,
      role: user.role,
      office_id: user.office_id
    });

    res.json({
      message: 'Registration completed successfully',
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role,
        office_id: user.office_id
      }
    });

  } catch (error) {
    console.error('üí• Accept invitation error:', error);
    res.status(500).json({
      error: 'Internal server error',
      details: error.message
    });
  }
});
// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error('Server error:', error);
  res.status(500).json({
    error: 'Internal server error',
    message: error.message
  });
});

// Serve static files from dist directory
app.use(express.static(join(__dirname, 'dist')));

// –í–ê–ñ–ù–û: React Router fallback –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï–î–ù–ò–ú
app.get('*', (req, res, next) => {
  if (req.path.startsWith('/api/')) {
    return next();
  }
  res.sendFile(join(__dirname, 'dist', 'index.html'));
});



app.listen(port, '0.0.0.0', () => {
  console.log(`üöÄ Server running on port ${port}`);
  console.log(`üì° API available at: http://localhost:${port}/api`);
  console.log(`üåê Frontend available at: http://localhost:${port}`);
  console.log(`üîß Health check: http://localhost:${port}/api/health`);
  console.log(`üóÑÔ∏è  Supabase URL: ${supabaseUrl ? 'configured' : 'NOT CONFIGURED'}`);
});