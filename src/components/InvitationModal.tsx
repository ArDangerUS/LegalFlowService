// src/components/InvitationModal.tsx - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –º–æ–¥–∞–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π

import React, { useState, useEffect } from 'react';
import { UserRole } from '../types/user';
import { invitationApi, apiClient } from '../lib/apiClient';

interface Office {
  id: string;
  name: string;
  address?: string;
  city: string;
  phone?: string;
  email?: string;
}

interface InvitationModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: (message?: string) => void;
  currentUserRole: UserRole;
  currentUserOfficeId?: string;
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞ –ø—Ä–æ–ø—Å–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  currentUser?: { role: UserRole; officeId?: string };
}

export const InvitationModal: React.FC<InvitationModalProps> = ({
  isOpen,
  onClose,
  onSuccess,
  currentUserRole,
  currentUserOfficeId,
  currentUser // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–ø
}) => {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –∏ –æ—Ñ–∏—Å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  const userRole = currentUserRole || currentUser?.role || 'lawyer';
  const userOfficeId = currentUserOfficeId || currentUser?.officeId;
  const [formData, setFormData] = useState({
    email: '',
    role: 'lawyer' as UserRole,
    officeId: ''
  });
  const [availableOffices, setAvailableOffices] = useState<Office[]>([]);
  const [availableRoles, setAvailableRoles] = useState<UserRole[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isLoadingOffices, setIsLoadingOffices] = useState(false);
  const [error, setError] = useState('');

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  useEffect(() => {
    console.log('üîç InvitationModal props:', {
      isOpen,
      currentUserRole,
      currentUserOfficeId,
      currentUser,
      userRole,
      userOfficeId,
      availableRoles: availableRoles.length,
      formData
    });
  }, [isOpen, currentUserRole, currentUserOfficeId, currentUser, userRole, userOfficeId, availableRoles, formData]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    console.log('üîë Setting up available roles for user role:', userRole);

    const roles: UserRole[] = [];

    if (userRole === 'admin') {
      roles.push('admin', 'office_admin', 'lawyer', 'client');
    } else if (userRole === 'office_admin') {
      roles.push('office_admin', 'lawyer', 'client');
    } else {
      // –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏
      roles.push('lawyer', 'client');
    }

    console.log('üìã Available roles:', roles);
    setAvailableRoles(roles);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (roles.length > 0) {
      const defaultRole = roles.includes('lawyer') ? 'lawyer' : roles[0];
      console.log('üéØ Setting default role:', defaultRole);
      setFormData(prev => ({ ...prev, role: defaultRole }));
    }
  }, [userRole]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ñ–∏—Å—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
  useEffect(() => {
    if (isOpen) {
      loadOffices();
    }
  }, [isOpen, userRole, userOfficeId]);

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    if (!isOpen) {
      setFormData({
        email: '',
        role: 'lawyer',
        officeId: ''
      });
      setError('');
    }
  }, [isOpen]);

  const loadOffices = async () => {
    setIsLoadingOffices(true);
    setError('');

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è API
      const apiBaseUrl = window.location.port === '5173' || window.location.port === '3001'
        ? 'http://localhost:3000'
        : '';

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –Ω–∞–ø—Ä—è–º—É—é
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API...');

      const healthResponse = await fetch(`${apiBaseUrl}/api/health`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      console.log('Health response status:', healthResponse.status);
      console.log('Health response headers:', Object.fromEntries(healthResponse.headers.entries()));

      if (!healthResponse.ok) {
        throw new Error(`Health check failed: ${healthResponse.status} ${healthResponse.statusText}`);
      }

      const contentType = healthResponse.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        throw new Error(`API –≤–µ—Ä–Ω—É–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π content-type: ${contentType}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000.`);
      }

      const healthData = await healthResponse.json();
      console.log('‚úÖ API Health check passed:', healthData);

      // –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ñ–∏—Å—ã —á–µ—Ä–µ–∑ apiClient
      console.log('üè¢ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ñ–∏—Å—ã...');
      const offices = await apiClient.get<Office[]>('/offices');
      console.log('‚úÖ Offices loaded:', offices);
      setAvailableOffices(offices || []);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –æ—Ñ–∏—Å
      if (offices && offices.length === 1) {
        setFormData(prev => ({ ...prev, officeId: offices[0].id }));
      } else if (userRole === 'office_admin' && userOfficeId) {
        // –ê–¥–º–∏–Ω –æ—Ñ–∏—Å–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π –æ—Ñ–∏—Å
        const userOffice = offices?.find(office => office.id === userOfficeId);
        if (userOffice) {
          setFormData(prev => ({ ...prev, officeId: userOffice.id }));
        }
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ–∏—Å–æ–≤:', err);
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ–∏—Å–æ–≤';
      setError(errorMessage);

      // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
      if (errorMessage.includes('Network error')) {
        setError('–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000.');
      }
    } finally {
      setIsLoadingOffices(false);
    }
  };

  const validateForm = () => {
    if (!formData.email.trim()) {
      throw new Error('Email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
    }

    if (!formData.email.includes('@')) {
      throw new Error('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
    }

    if (!formData.role) {
      throw new Error('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    // –û—Ñ–∏—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 1
    if (availableOffices.length > 1 && !formData.officeId) {
      throw new Error('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ–∏—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    return true;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      validateForm();

      const invitationData = {
        email: formData.email.trim(),
        role: formData.role,
        officeId: formData.officeId || (availableOffices.length === 1 ? availableOffices[0].id : undefined)
      };

      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', invitationData);

      const result = await invitationApi.create(invitationData);

      console.log('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', result);

      onSuccess(`–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${formData.email}`);
      handleClose();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', err);
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è';
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  const handleClose = () => {
    if (!isLoading) {
      onClose();
    }
  };

  const getRoleDisplayName = (role: UserRole) => {
    const roleNames = {
      admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      office_admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ñ–∏—Å–∞',
      lawyer: '–Æ—Ä–∏—Å—Ç',
      client: '–ö–ª–∏–µ–Ω—Ç'
    };
    return roleNames[role] || role;
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-bold text-gray-900">
            –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          </h2>
          <button
            onClick={handleClose}
            disabled={isLoading}
            className="text-gray-400 hover:text-gray-600 disabled:opacity-50"
          >
            √ó
          </button>
        </div>

        {error && (
          <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-red-700 text-sm">{error}</p>
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-4">
          {/* Email */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Email –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è *
            </label>
            <input
              type="email"
              value={formData.email}
              onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
              placeholder="email@example.com"
              required
              disabled={isLoading}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100"
            />
          </div>

          {/* –†–æ–ª—å */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –†–æ–ª—å –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *
            </label>
            <select
              value={formData.role}
              onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value as UserRole }))}
              required
              disabled={isLoading}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100 bg-white"
            >
              {availableRoles.length === 0 ? (
                <option value="">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ–ª–µ–π...</option>
              ) : (
                availableRoles.map(role => (
                  <option key={role} value={role}>
                    {getRoleDisplayName(role)}
                  </option>
                ))
              )}
            </select>
            {availableRoles.length === 0 && (
              <p className="text-sm text-red-500 mt-1">
                –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
              </p>
            )}
          </div>

          {/* –û—Ñ–∏—Å */}
          {isLoadingOffices ? (
            <div className="text-center py-4">
              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto"></div>
              <p className="text-sm text-gray-500 mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ñ–∏—Å–æ–≤...</p>
            </div>
          ) : availableOffices.length > 1 ? (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –û—Ñ–∏—Å *
              </label>
              <select
                value={formData.officeId}
                onChange={(e) => setFormData(prev => ({ ...prev, officeId: e.target.value }))}
                required
                disabled={isLoading}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100"
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ–∏—Å...</option>
                {availableOffices.map(office => (
                  <option key={office.id} value={office.id}>
                    {office.name} ({office.city})
                  </option>
                ))}
              </select>
            </div>
          ) : availableOffices.length === 1 ? (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –û—Ñ–∏—Å
              </label>
              <div className="px-3 py-2 bg-gray-50 border border-gray-200 rounded-lg text-gray-700">
                {availableOffices[0].name} ({availableOffices[0].city})
              </div>
            </div>
          ) : (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –û—Ñ–∏—Å
              </label>
              <div className="px-3 py-2 bg-yellow-50 border border-yellow-200 rounded-lg text-yellow-800">
                ‚ö†Ô∏è –û—Ñ–∏—Å—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –æ—Ñ–∏—Å—É.
              </div>
            </div>
          )}

          {/* –ü—Ä–∞–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏ */}
          <div className="p-3 bg-blue-50 rounded-lg">
            <h4 className="text-sm font-medium text-blue-900 mb-1">
              –ü—Ä–∞–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏:
            </h4>
            <div className="text-sm text-blue-800 space-y-1">
              {formData.role === 'admin' && (
                <ul className="list-disc list-inside space-y-1">
                  <li>–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ</li>
                  <li>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –æ—Ñ–∏—Å–∞–º–∏</li>
                  <li>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–µ–ª –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</li>
                </ul>
              )}
              {formData.role === 'office_admin' && (
                <ul className="list-disc list-inside space-y-1">
                  <li>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–≤–æ–µ–≥–æ –æ—Ñ–∏—Å–∞</li>
                  <li>–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ–ª —Å–≤–æ–µ–≥–æ –æ—Ñ–∏—Å–∞</li>
                  <li>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ —Å–≤–æ–π –æ—Ñ–∏—Å</li>
                </ul>
              )}
              {formData.role === 'lawyer' && (
                <ul className="list-disc list-inside space-y-1">
                  <li>–†–∞–±–æ—Ç–∞ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏</li>
                  <li>–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π</li>
                  <li>–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–ª–ª–µ–≥ –ø–æ –æ—Ñ–∏—Å—É</li>
                </ul>
              )}
              {formData.role === 'client' && (
                <ul className="list-disc list-inside space-y-1">
                  <li>–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –¥–µ–ª</li>
                  <li>–û–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —é—Ä–∏—Å—Ç–∞–º–∏</li>
                </ul>
              )}
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex space-x-3 pt-4">
            <button
              type="button"
              onClick={handleClose}
              disabled={isLoading}
              className="flex-1 px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors disabled:opacity-50"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              disabled={isLoading || isLoadingOffices}
              className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 flex items-center justify-center"
            >
              {isLoading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  –û—Ç–ø—Ä–∞–≤–∫–∞...
                </>
              ) : (
                '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ'
              )}
            </button>
          </div>
        </form>

        <div className="mt-4 p-3 bg-gray-50 rounded-lg">
          <p className="text-xs text-gray-600">
            –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç email —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
            –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π.
          </p>
        </div>
      </div>
    </div>
  );
};